1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["_QDeOv29XYyrnP19mEax6",[[["",{"children":["tags",{"children":[["slug","ios","d"],{"children":["__PAGE__?{\"slug\":\"ios\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
9:I{"id":1247,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","396:static/chunks/396-5bd701a67a6189e9.js","355:static/chunks/app/tags/[slug]/page-4363d8d5fe95e0a7.js"],"name":"","async":false}
a:I{"id":41465,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","396:static/chunks/396-5bd701a67a6189e9.js","355:static/chunks/app/tags/[slug]/page-4363d8d5fe95e0a7.js"],"name":"","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children",["slug","ios","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",["$","div",null,{"className":"pt-[80px]","children":[["$","$L9",null,{"language":"app","screenType":"TAGS"}],["$","main",null,{"className":"flex w-full justify-center","children":["$","div",null,{"className":"flex flex-row justify-start xl:w-[800px] w-full px-[20px] py-[40px] md:px-[40px] md:pb-[80px] md:pt-[60px] gap-[80px]","children":["$","section",null,{"className":"flex flex-1 flex-col gap-[80px]","children":[["$","h2",null,{"className":"md:flex hidden text-gray-900 font-semibold text-[22px]","children":"iOS 관련글"}],["$","ul",null,{"className":"flex flex-1 flex-col gap-[80px]","children":[["$","li","iOS 구독 모델 구현: StoreKit을 이용한 반복 결제 시스템 설계 및 관리0",{"children":["$","$La",null,{"postMeta":{"id":"aae7a94b-c211-4ba3-9939-f77ed83a3392","path":"/swift/iOS-구독-모델-구현-StoreKit을-이용한-반복-결제-시스템-설계-및-관리-aae7a94b","title":"iOS 구독 모델 구현: StoreKit을 이용한 반복 결제 시스템 설계 및 관리","description":"이 문서는 iOS 애플리케이션에서 StoreKit을 이용하여 구독 모델을 구현하는 방법을 다룹니다. 반복 결제 시스템 설계와 구독 상태 관리에 대한 자세한 설명을 제공합니다.","date":"2024-07-02T06:05:20.515Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"StoreKit","path":"/tags/storekit","id":"storekit"},{"name":"구독 모델","path":"/tags/구독-모델","id":"구독-모델"},{"name":"반복 결제","path":"/tags/반복-결제","id":"반복-결제"}],"readMin":"5.5","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":0,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","성능 최적화를 위한 UICollectionViewCompositionalLayout의 주요 메서드와 팁1",{"children":["$","$La",null,{"postMeta":{"id":"8c849992-eb99-446f-aaaf-6bf4e2e92599","path":"/swift/성능-최적화를-위한-UICollectionViewCompositionalLayout의-주요-메서드와-팁-8c849992","title":"성능 최적화를 위한 UICollectionViewCompositionalLayout의 주요 메서드와 팁","description":"이 글은 성능 최적화를 위한 UICollectionViewCompositionalLayout의 주요 메서드와 팁을 다룹니다. UICollectionViewCompositionalLayout는 유연하고 복잡한 레이아웃을 쉽게 구현할 수 있는 강력한 도구입니다. 본 글에서는 이 레이아웃의 성능을 최적화하기 위한 실용적인 방법과 유용한 메서드를 소개합니다.","date":"2024-07-02T06:05:00.340Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"UICollectionView","path":"/tags/uicollectionview","id":"uicollectionview"},{"name":"성능 최적화","path":"/tags/성능-최적화","id":"성능-최적화"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":1,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS에서 반응형 디자인 만들기: 적응형 레이아웃에서 layoutSubviews의 역할2",{"children":["$","$La",null,{"postMeta":{"id":"574eb4b0-f528-4479-ab1c-fd7503f359ef","path":"/swift/iOS에서-반응형-디자인-만들기-적응형-레이아웃에서-layoutSubviews의-역할-574eb4b0","title":"iOS에서 반응형 디자인 만들기: 적응형 레이아웃에서 layoutSubviews의 역할","description":"이 글에서는 iOS 애플리케이션에서 반응형 디자인을 구현하는 방법을 설명합니다. 특히 적응형 레이아웃에서 `layoutSubviews`의 역할을 중점적으로 다룹니다.","date":"2024-07-01T06:02:06.788Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"반응형 디자인","path":"/tags/반응형-디자인","id":"반응형-디자인"},{"name":"layoutSubviews","path":"/tags/layoutsubviews","id":"layoutsubviews"}],"readMin":"3.7","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":2,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기3",{"children":["$","$La",null,{"postMeta":{"id":"85bdd016-bd1c-45f4-84c3-1ffb4b8720ca","path":"/swift/동적-인터페이스를-위한-커스텀-UI-컴포넌트의-예술-layoutSubviews-통합하기-85bdd016","title":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기","description":"이 글은 iOS 개발에서 많이 사용하는 Swift 언어로 동적 인터페이스를 만드는 방법, 특히 `layoutSubviews` 메서드를 통합하여 커스텀 UI 컴포넌트를 만드는 예술에 대해 다룹니다. `layoutSubviews` 메서드는 뷰의 레이아웃을 맞추는 위치와 크기를 계산하기 위한 중요한 메서드입니다.","date":"2024-07-01T06:01:33.168Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"UI Components","path":"/tags/ui-components","id":"ui-components"},{"name":"layoutSubviews","path":"/tags/layoutsubviews","id":"layoutsubviews"}],"readMin":"4.9","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":3,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","draw(_:)를 사용한 iOS 앱 비주얼 향상 방법4",{"children":["$","$La",null,{"postMeta":{"id":"fd83688d-2ac0-4207-8655-456e034da147","path":"/swift/draw를-사용한-iOS-앱-비주얼-향상-방법-fd83688d","title":"draw(_:)를 사용한 iOS 앱 비주얼 향상 방법","description":"이 글은 Swift에서 `draw(_:)` 메서드를 사용하여 iOS 애플리케이션의 비주얼을 향상시키는 방법에 대해 다룹니다. 이를 통해 커스터마이즈된 그래픽을 생성하고, 애플리케이션의 사용자 경험을 개선할 수 있습니다.","date":"2024-06-30T06:01:18.349Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"draw(_:)","path":"/tags/draw(_:)","id":"draw(_:)"},{"name":"그래픽","path":"/tags/그래픽","id":"그래픽"}],"readMin":"6.9","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":4,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","NSCollectionLayoutDimension을 사용한 첫 UICollectionViewCompositionalLayout 구현하기5",{"children":["$","$La",null,{"postMeta":{"id":"6ff98357-efe9-4d97-9e2d-60cadc794f2e","path":"/swift/NSCollectionLayoutDimension을-사용한-첫-UICollectionViewCompositionalLayout-구현하기-6ff98357","title":"NSCollectionLayoutDimension을 사용한 첫 UICollectionViewCompositionalLayout 구현하기","description":"이 글에서는 UICollectionViewCompositionalLayout을 통해 새로운 형태로 컬렉션뷰를 레이아웃하고, NSCollectionLayoutDimension을 사용하여 첫 번째 컴포지셔널 레이아웃을 구현하는 방법을 단계별로 살펴봅니다.","date":"2024-06-28T06:00:51.845Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UICollectionView","path":"/tags/uicollectionview","id":"uicollectionview"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"CompositionalLayout","path":"/tags/compositionallayout","id":"compositionallayout"}],"readMin":"5.8","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":5,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS 레이아웃 최적화: updateConstraints와 setFrame 사용 비교6",{"children":["$","$La",null,{"postMeta":{"id":"72786722-70dc-4a4f-96b8-1d51cc617f18","path":"/swift/iOS-레이아웃-최적화-updateConstraints와-setFrame-사용-비교-72786722","title":"iOS 레이아웃 최적화: updateConstraints와 setFrame 사용 비교","description":"이 글은 iOS 앱 개발에서 레이아웃 최적화를 위해 `updateConstraints`와 `setFrame`을 비교하며, 각각의 사용 시기를 설명합니다. 이를 통해 개발자는 효율적이고 성능 최적화된 UI를 구성할 수 있습니다.","date":"2024-06-27T06:01:51.003Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"레이아웃","path":"/tags/레이아웃","id":"레이아웃"},{"name":"성능 최적화","path":"/tags/성능-최적화","id":"성능-최적화"}],"readMin":"3.8","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":6,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS에서 updateConstraints 마스터하기: 효율적인 레이아웃을 위해 언제, 어떻게 사용해야 할까?7",{"children":["$","$La",null,{"postMeta":{"id":"d37d2bcf-bfdf-4cff-8d3b-924b4a5798a9","path":"/swift/iOS에서-updateConstraints-마스터하기-효율적인-레이아웃을-위해-언제-어떻게-사용해야-할까-d37d2bcf","title":"iOS에서 updateConstraints 마스터하기: 효율적인 레이아웃을 위해 언제, 어떻게 사용해야 할까?","description":"iOS 개발에서 레이아웃을 다루는 것은 중요한 작업 중 하나입니다. 이 글에서는 효율적인 레이아웃 관리를 위해 `updateConstraints` 메서드를 언제, 어떻게 사용해야 하는지에 대해 마스터하는 방법을 다룹니다.","date":"2024-06-26T06:01:42.862Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"컨스트레인트","path":"/tags/컨스트레인트","id":"컨스트레인트"},{"name":"레이아웃","path":"/tags/레이아웃","id":"레이아웃"}],"readMin":"5.5","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":7,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기8",{"children":["$","$La",null,{"postMeta":{"id":"48b3f93e-b03c-4140-a2ab-13e12aeddbe3","path":"/swift/Swift-ReactorKit-첫걸음-간단한-카운터-앱-만들기-48b3f93e","title":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기","description":"이 글은 iOS 개발을 위해 스위프트와 ReactorKit을 사용해 간단한 카운터 앱을 만드는 방법을 설명합니다. 이 튜토리얼은 기본적인 구성 요소부터 시작하여 단계별로 진행하며, ReactorKit의 핵심 기능을 이해하는 데 도움을 줍니다.","date":"2024-06-24T06:03:09.502Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"ReactorKit","path":"/tags/reactorkit","id":"reactorkit"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"카운터 앱","path":"/tags/카운터-앱","id":"카운터-앱"}],"readMin":"5.4","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":8,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","contentInsetAdjustmentBehavior의 성능 영향 평가: 이 속성 변경이 앱 성능에 미치는 영향 분석.9",{"children":["$","$La",null,{"postMeta":{"id":"b069b956-995e-4fa0-9b0c-8c22b82434dc","path":"/swift/contentInsetAdjustmentBehavior의-성능-영향-평가-이-속성-변경이-앱-성능에-미치는-영향-분석-b069b956","title":"contentInsetAdjustmentBehavior의 성능 영향 평가: 이 속성 변경이 앱 성능에 미치는 영향 분석.","description":"이 글에서는 Swift 언어와 iOS 개발에서 중요한 UI 구성 요소인 contentInsetAdjustmentBehavior 속성이 앱 성능에 미치는 영향을 분석합니다. 각 속성 값의 차이점을 비교하고, 성능 최적화를 위한 고려 사항들을 구체적으로 다룹니다.","date":"2024-06-24T06:02:49.652Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"성능 최적화","path":"/tags/성능-최적화","id":"성능-최적화"},{"name":"UI","path":"/tags/ui","id":"ui"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":9,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","[Swift] DeepLink와 앱 내 네비게이션 통합: DeepLink를 통해 특정 화면으로 바로 이동하는 방법10",{"children":["$","$La",null,{"postMeta":{"id":"7acbe0a2-478f-4930-8c80-1676b26101aa","path":"/swift/Swift-DeepLink와-앱-내-네비게이션-통합-DeepLink를-통해-특정-화면으로-바로-이동하는-방법-7acbe0a2","title":"[Swift] DeepLink와 앱 내 네비게이션 통합: DeepLink를 통해 특정 화면으로 바로 이동하는 방법","description":"[Swift] DeepLink와 앱 내 네비게이션 통합 주제에서, DeepLink 기능을 통해 사용자가 특정 화면으로 바로 이동할 수 있는 방법을 알아봅니다.","date":"2024-06-24T06:02:35.454Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"DeepLink","path":"/tags/deeplink","id":"deeplink"},{"name":"네비게이션","path":"/tags/네비게이션","id":"네비게이션"},{"name":"iOS","path":"/tags/ios","id":"ios"}],"readMin":"4.6","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":10,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS에서 Combine 프레임워크를 사용한 반응형 프로그래밍: 데이터 바인딩과 스트림 관리 기술.11",{"children":["$","$La",null,{"postMeta":{"id":"96c589bf-4bc0-4e89-bd6c-275b96a6b2a1","path":"/swift/iOS에서-Combine-프레임워크를-사용한-반응형-프로그래밍-데이터-바인딩과-스트림-관리-기술-96c589bf","title":"iOS에서 Combine 프레임워크를 사용한 반응형 프로그래밍: 데이터 바인딩과 스트림 관리 기술.","description":"iOS 개발에서 새로운 반응형 프로그래밍 패러다임을 도입한 Combine 프레임워크는 데이터 스트림을 효율적으로 관리하고 바인딩하는 데에 탁월한 성능을 보여줍니다. 이 글에서는 Combine 프레임워크의 기본 개념과 함께 실전에서 사용되는 주요 기술들을 심도 있게 다룹니다.","date":"2024-06-20T06:05:18.852Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Combine","path":"/tags/combine","id":"combine"},{"name":"반응형 프로그래밍","path":"/tags/반응형-프로그래밍","id":"반응형-프로그래밍"},{"name":"데이터 스트림","path":"/tags/데이터-스트림","id":"데이터-스트림"}],"readMin":"5.1","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":11,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS 애플리케이션의 성능 최적화 기법: 프로파일링 도구를 사용한 성능 분석 및 개선 방법.12",{"children":["$","$La",null,{"postMeta":{"id":"6fc142c5-2a49-44ef-9eb5-e82138b0fa32","path":"/swift/iOS-애플리케이션의-성능-최적화-기법-프로파일링-도구를-사용한-성능-분석-및-개선-방법-6fc142c5","title":"iOS 애플리케이션의 성능 최적화 기법: 프로파일링 도구를 사용한 성능 분석 및 개선 방법.","description":"이 글에서는 iOS 애플리케이션의 성능 최적화 기법에 대해 알아봅니다. 주요 프로파일링 도구를 사용하여 성능을 분석하고 개선하는 방법을 단계별로 설명하고, 개발자들이 자주 마주하는 성능 문제와 해결 팁도 제공합니다.","date":"2024-06-19T06:02:50.826Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"성능 최적화","path":"/tags/성능-최적화","id":"성능-최적화"},{"name":"프로파일링","path":"/tags/프로파일링","id":"프로파일링"}],"readMin":"5.3","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":12,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS에서 고성능 애니메이션을 위한 draw(_:) 활용 방법13",{"children":["$","$La",null,{"postMeta":{"id":"033ca511-148c-44a1-9a92-76e280443789","path":"/swift/iOS에서-고성능-애니메이션을-위한-draw-활용-방법-033ca511","title":"iOS에서 고성능 애니메이션을 위한 draw(_:) 활용 방법","description":"이 글은 iOS 개발에서 고성능 애니메이션을 구현하기 위해 draw(_:) 메서드를 활용하는 방법을 설명합니다. Swift 언어를 사용하여 효율적인 애니메이션 구현 방법을 다루며, 구체적인 코드 예제와 성능 최적화 팁을 제공합니다.","date":"2024-06-19T06:01:05.079Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"애니메이션","path":"/tags/애니메이션","id":"애니메이션"},{"name":"draw(_:) 사용","path":"/tags/draw(_:)-사용","id":"draw(_:)-사용"},{"name":"Swift","path":"/tags/swift","id":"swift"}],"readMin":"3.5","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":13,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","draw(_:): 기술과 팁을 활용한 iOS에서의 커스텀 드로잉14",{"children":["$","$La",null,{"postMeta":{"id":"97220474-878d-4f28-9462-907fa3fe6e86","path":"/swift/draw-기술과-팁을-활용한-iOS에서의-커스텀-드로잉-97220474","title":"draw(_:): 기술과 팁을 활용한 iOS에서의 커스텀 드로잉","description":"이 글은 iOS에서 `draw(_:)` 메서드를 활용하여 커스텀 드로잉을 구현하는 기술과 팁에 대해 다룹니다. 특히, Swift 언어를 바탕으로 한 예제와 세부 사항을 설명합니다.","date":"2024-06-18T06:05:39.332Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"커스텀 드로잉","path":"/tags/커스텀-드로잉","id":"커스텀-드로잉"},{"name":"draw(_:)","path":"/tags/draw(_:)","id":"draw(_:)"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":14,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","NSCollectionLayoutSection과 NSCollectionLayoutGroup을 활용한 멀티 섹션 레이아웃 마스터하기15",{"children":["$","$La",null,{"postMeta":{"id":"f7404421-93f0-49ae-a65c-1df6e6453987","path":"/swift/NSCollectionLayoutSection과-NSCollectionLayoutGroup을-활용한-멀티-섹션-레이아웃-마스터하기-f7404421","title":"NSCollectionLayoutSection과 NSCollectionLayoutGroup을 활용한 멀티 섹션 레이아웃 마스터하기","description":"이 글에서는 Swift의 NSCollectionLayoutSection과 NSCollectionLayoutGroup을 활용하여 멀티 섹션 레이아웃을 구현하는 방법을 마스터하는 과정을 다룹니다. 다양한 예제와 함께 각 구성 요소의 활용법을 자세히 설명합니다.","date":"2024-06-18T06:02:28.654Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"UICollectionView","path":"/tags/uicollectionview","id":"uicollectionview"},{"name":"Layout","path":"/tags/layout","id":"layout"}],"readMin":"5.0","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":15,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift의 replacingCharacters로 텍스트 입력 필드 실시간 수정하기16",{"children":["$","$La",null,{"postMeta":{"id":"83d5f322-12b0-49a4-b09d-b3d890b53976","path":"/swift/Swift의-replacingCharacters로-텍스트-입력-필드-실시간-수정하기-83d5f322","title":"Swift의 replacingCharacters로 텍스트 입력 필드 실시간 수정하기","description":"Swift의 replacingCharacters 메소드를 사용하여 텍스트 입력 필드의 내용을 실시간으로 수정하는 방법을 설명합니다. 이 방법을 통해 사용자 입력을 실시간으로 포맷팅하거나 검증할 수 있습니다.","date":"2024-06-17T01:02:14.436Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"replacingCharacters","path":"/tags/replacingcharacters","id":"replacingcharacters"},{"name":"텍스트 필드","path":"/tags/텍스트-필드","id":"텍스트-필드"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":16,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift 코드에서 디바이스와 시뮬레이터 분기문 작성하기17",{"children":["$","$La",null,{"postMeta":{"id":"b6bf1e29-dd44-426e-a046-0366dde4bd1b","path":"/swift/Swift-코드에서-디바이스와-시뮬레이터-분기문-작성하기-b6bf1e29","title":"Swift 코드에서 디바이스와 시뮬레이터 분기문 작성하기","description":"Swift 언어를 사용하여 애플리케이션을 개발할 때, 디바이스와 시뮬레이터에서 코드가 다르게 실행되도록 조건문을 작성하는 방법에 대해 알아봅니다.","date":"2024-06-17T01:00:22.167Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"시뮬레이터","path":"/tags/시뮬레이터","id":"시뮬레이터"},{"name":"디바이스","path":"/tags/디바이스","id":"디바이스"}],"readMin":"4.2","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":17,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift로 디바이스와 시뮬레이터 환경에 맞춘 조건부 코드 작성법18",{"children":["$","$La",null,{"postMeta":{"id":"47ac2025-b2d0-476f-b6df-69c80a0a0d48","path":"/swift/Swift로-디바이스와-시뮬레이터-환경에-맞춘-조건부-코드-작성법-47ac2025","title":"Swift로 디바이스와 시뮬레이터 환경에 맞춘 조건부 코드 작성법","description":"Swift로 iOS 개발을 할 때, 디바이스와 시뮬레이터 환경에 맞춘 조건부 코드를 작성하는 방법에 대해 다룹니다. 실제 디바이스와 시뮬레이터의 차이점을 이해하고, 각 환경에 적합한 코드를 작성하기 위한 팁과 예제를 제공합니다.","date":"2024-06-15T13:18:31.102Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"조건부 코드","path":"/tags/조건부-코드","id":"조건부-코드"},{"name":"시뮬레이터","path":"/tags/시뮬레이터","id":"시뮬레이터"}],"readMin":"5.8","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":18,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","효율적인 UI 배치를 위한 setContentHuggingPriority 사용법19",{"children":["$","$La",null,{"postMeta":{"id":"cbfffa91-596a-4b2c-a9ce-e57b0196a1b1","path":"/swift/효율적인-UI-배치를-위한-setContentHuggingPriority-사용법-cbfffa91","title":"효율적인 UI 배치를 위한 setContentHuggingPriority 사용법","description":"Swift 개발에서 UI 요소 간의 효율적인 배치를 위해 자주 사용되는 setContentHuggingPriority 메서드의 활용법과 원리를 다룹니다. 본 글은 setContentHuggingPriority의 사용법을 예제로 설명하며, 이를 통해 UI 개발 효율성을 높이는 방법을 안내합니다.","date":"2024-06-14T11:49:23.596Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UI","path":"/tags/ui","id":"ui"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"개발","path":"/tags/개발","id":"개발"}],"readMin":"4.6","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":19,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift OptionSet 사용법: 사용자 권한 관리 구현하기20",{"children":["$","$La",null,{"postMeta":{"id":"babafcdc-d395-4113-8027-d2b6a86d8b60","path":"/swift/Swift-OptionSet-사용법-사용자-권한-관리-구현하기-babafcdc","title":"Swift OptionSet 사용법: 사용자 권한 관리 구현하기","description":"Swift의 강력한 기능 중 하나인 OptionSet을 활용하여 사용자 권한 관리를 구현하는 방법을 살펴봅니다. OptionSet을 사용하면 비트 마스킹을 통해 여러 가지 권한을 효율적으로 관리할 수 있습니다.","date":"2024-06-14T11:49:00.177Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"OptionSet","path":"/tags/optionset","id":"optionset"},{"name":"사용자 권한","path":"/tags/사용자-권한","id":"사용자-권한"},{"name":"iOS","path":"/tags/ios","id":"ios"}],"readMin":"5.6","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":20,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift를 활용한 Bottom Sheet 애니메이션 효과 추가하기21",{"children":["$","$La",null,{"postMeta":{"id":"52d57d7c-632b-404f-941f-de4e2f61dc9a","path":"/swift/Swift를-활용한-Bottom-Sheet-애니메이션-효과-추가하기-52d57d7c","title":"Swift를 활용한 Bottom Sheet 애니메이션 효과 추가하기","description":"이 글은 Swift를 활용하여 iOS 애플리케이션에서 Bottom Sheet 애니메이션 효과를 구현하는 방법을 설명합니다. 이 글에서 필요한 UIKit 요소와 Swift의 애니메이션 API를 사용하는 방법을 배우게 됩니다.","date":"2024-06-14T11:48:07.956Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"애니메이션","path":"/tags/애니메이션","id":"애니메이션"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"}],"readMin":"5.9","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":21,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!22",{"children":["$","$La",null,{"postMeta":{"id":"82894498-76a4-481c-a571-acb5fee18d0c","path":"/swift/PropertyWrapper-혁명-Swift-개발-생산성-올리는-비법-82894498","title":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!","description":"이 글에서는 Swift의 Property Wrapper 기능을 설명하고, 이를 통해 개발 생산성을 극대화하는 방법에 대해 다룹니다. 프로퍼티 래퍼를 사용하면 코드의 재사용성과 가독성을 높일 수 있습니다.","date":"2024-06-11T15:20:54.048Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"PropertyWrapper","path":"/tags/propertywrapper","id":"propertywrapper"},{"name":"개발 생산성","path":"/tags/개발-생산성","id":"개발-생산성"},{"name":"iOS","path":"/tags/ios","id":"ios"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":22,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS 앱 개발: setContentHuggingPriority로 뷰가 겹치는 문제 해결하기23",{"children":["$","$La",null,{"postMeta":{"id":"e3002134-7a45-4b4e-8f05-cd885b2f4026","path":"/swift/iOS-앱-개발-setContentHuggingPriority로-뷰가-겹치는-문제-해결하기-e3002134","title":"iOS 앱 개발: setContentHuggingPriority로 뷰가 겹치는 문제 해결하기","description":"iOS 앱 개발 중 뷰가 겹치는 문제를 해결하기 위해 setContentHuggingPriority 메서드를 사용하는 방법에 대해 알아봅니다. 이 기법은 뛰어난 사용자 경험을 제공하기 위해 인터페이스의 레이아웃 제어를 향상시킵니다.","date":"2024-06-11T06:07:16.100Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"앱 개발","path":"/tags/앱-개발","id":"앱-개발"},{"name":"뷰 레이아웃","path":"/tags/뷰-레이아웃","id":"뷰-레이아웃"}],"readMin":"3.9","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":23,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","OptionSet으로 여러 설정을 간편하게 관리하기: 실제 사례와 코드24",{"children":["$","$La",null,{"postMeta":{"id":"198e62a1-06c5-42e8-8533-75adad763bb2","path":"/swift/OptionSet으로-여러-설정을-간편하게-관리하기-실제-사례와-코드-198e62a1","title":"OptionSet으로 여러 설정을 간편하게 관리하기: 실제 사례와 코드","description":"이 문서는 Swift 언어에서 OptionSet을 활용하여 여러 설정을 간편하게 관리하는 방법을 실제 사례와 함께 설명합니다. OptionSet의 장점과 구현 방법, 코드 예제를 통해 이해를 돕고자 합니다.","date":"2024-06-02T00:00:00.000Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"OptionSet","path":"/tags/optionset","id":"optionset"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"프로그래밍","path":"/tags/프로그래밍","id":"프로그래밍"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":24,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIActivityViewController로 iOS 앱에서 사용자 경험 향상시키기25",{"children":["$","$La",null,{"postMeta":{"id":"5d4d93ca-285a-4270-9bb3-01e9f4278cc1","path":"/swift/UIActivityViewController로-iOS-앱에서-사용자-경험-향상시키기-5d4d93ca","title":"UIActivityViewController로 iOS 앱에서 사용자 경험 향상시키기","description":"Swift 언어를 사용하여 iOS 앱에서 `UIActivityViewController`를 활용하여 사용자의 경험을 향상시키는 방법을 간단하게 설명합니다. 이 컨트롤러를 통해 사용자는 콘텐츠를 쉽게 공유할 수 있습니다.","date":"2024-06-02T00:00:00.000Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"UIActivityViewController","path":"/tags/uiactivityviewcontroller","id":"uiactivityviewcontroller"},{"name":"사용자 경험","path":"/tags/사용자-경험","id":"사용자-경험"}],"readMin":"1.7","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":25,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기26",{"children":["$","$La",null,{"postMeta":{"id":"35be7d38-cdef-4bcb-8a61-9b9c3a3a8256","path":"/swift/iOS-성능-최적화-NSLock와-NSRecursiveLock으로-동시성-문제-해결하기-35be7d38","title":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기","description":"본 글에서는 iOS 개발 시 성능 최적화를 위해 사용되는 두 가지 중요한 동기화 도구인 `NSLock`과 `NSRecursiveLock`에 대해 알아보고, 이를 통해 동시성 문제를 효과적으로 해결하는 방법을 소개합니다.","date":"2024-06-02T00:00:00.000Z","tags":[{"name":"iOS","path":"/tags/ios","id":"ios"},{"name":"성능 최적화","path":"/tags/성능-최적화","id":"성능-최적화"},{"name":"NSLock","path":"/tags/nslock","id":"nslock"},{"name":"NSRecursiveLock","path":"/tags/nsrecursivelock","id":"nsrecursivelock"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":26,"articleType":"최신글","screenType":"TAGS","language":"app"}]}]]}]]}]}]}]]}],null],"segment":"__PAGE__?{\"slug\":\"ios\"}"},"styles":[]}],"segment":["slug","ios","d"]},"styles":[]}],"segment":"tags"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 관련글 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","3",{"name":"keywords","content":"마고자비 블로그 블로그,Swift,Javascript,최적화,앱개발,1인 개발,개발자,개발,Developer"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com//tags/ios"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 관련글 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 관련글 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com//tags/ios"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/magomercy.png"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 관련글 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/magomercy.png"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
8:null
